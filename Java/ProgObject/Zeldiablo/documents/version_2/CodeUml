@startuml
class Aventurier{
-epee : boolean
+Aventurier(x, y)
+getEpee()
+setEpee(bool)
}


class JeuPerso{
-victoire : boolean
-defaite : boolean
-tape : boolean
+JeuPerso(a,b)
+evoluer(c)
+etreFini()
+getJeu()
+getJ()
+getTape()
+setTape(boolean)
+getVictoire()
+setVictoire(boolean)
+isDefaite()
+setDefaite(boolean)
}
class MainZeldiablo{

}

class DessinPerso{
+DessinPerso(j)
+dessiner(image)
}
Interface DessinJeu{
+Abstract dessiner(BufferedImage)
}
class Commande{
-haut : boolean
-bas : boolean
-gauche : boolean
-droite : boolean
+Commande()
+Commande(Commande)
}
class Controleur{
+Controleur()
+getCommande()
+keyPressed(keyEvent)
+keyRelease(keyEvent)
+keyTyped(keyEvent)
}
class InterfaceGraphique{

+InterfaceGraphique(AfficheurUtile, x,y)
+getControleur()
+dessiner()
}
Interface JeuI{
+evoluer(Commande)
+etrefini()
}
class MoteurGraphique{
-gui : InterfaceGraphique
+MoteurGraphique(DessinJeu)
+lancerJeu(width; height)
}
class PanelDessin{
-imageSuivante : BufferedImage
-imageEnCours : BufferedImage
-width : int
-height : int
+PanelDessin(x, y, affiche)
+dessinerJeu()
+paint(g)
}


class Jeu{
-tabDepAleat : [] String
-tabMonstre : [] Entite
+Jeu()
+deplacement(String direction)
}
class Labyrinthe{
+Labyrinthe()
+placerMur(x, y)
+getCase(x, y)
+isEmpty(x, y)
+isSpecial(x, y)
+isTaken(x, y)
+isPotion(x, y)
}
Class MonstreImmo{
+MonstreImmo(terrain)

}

Abstract class Entite{
-attaque : int
-vie : int
-nom : String
-posX : int
-posY : int
-enVie : boolean
+attaquer(j)
+Entite(terrain)
+getX()
+getY()
+setposX(posX)
+setposY(posY)
+getAttaque()
+setAttaque(attaque)
+getVie()
+setVie(vie)
+getNom()
+setNom(nom)
+deplacement()
+etreEnVie()
+getEnVie()
+aCoter(j)

}
class MonstreDeplacementAleat{
+MonstreDeplacementAleat(terrain)

}
class Case{
-sol : boolean
-placePris : boolean
-special : boolean
-potion : boolean
+Case()
+isEmpty()
+setSol(bool)
+isSpecial()
+setSpecial(bool)
+isTaken()
+setTaken(bool)
+isPotion()
+setPotion(bool)
}
Labyrinthe"1" -> "1" Jeu : -labyrinthe
Entite <|-- Aventurier 
Entite "*" <- "1" Jeu : -entite
MonstreDeplacementAleat --|>  Entite
MonstreImmo --|> Entite
Labyrinthe "1"-> "*" Case : -lab
DessinPerso ..|> DessinJeu
JeuPerso ..|> JeuI
Controleur ..|> KeyListener
PanelDessin --|> Jpanel
PanelDessin "1"->"1" DessinJeu : -dessin
MoteurGraphique "1"->"1" Jeu : -jeu
MoteurGraphique "1"->"1" DessinJeu : -dessin
InterfaceGraphique"1" ->"1" PanelDessin : -panel
InterfaceGraphique"1" ->"1" Controleur : -controleur
Controleur "1"-> "1"Commande : -commandeEnCours, -commandeARetourner
DessinPerso "1"-> "1"JeuPerso : -jeu
JeuPerso "1"-> "1"Jeu : -j
@enduml




Diagramme de séquence fonctionnalité 1.1

@startuml
create Jeu
create Labyrinthe
Jeu -> Labyrinthe : Labyrinthe()
activate Labyrinthe
loop 10
loop 10
create Case
Labyrinthe -> Case : Case(true)
activate Case
Case --> Labyrinthe
deactivate Case
end 
end
loop i
Labyrinthe -> Labyrinthe : placerMur(x, y)
Labyrinthe -> Case : setSol(false)
activate Case
Case --> Labyrinthe 
deactivate Case
end
loop
Labyrinthe -> Case : isEmpty()
activate Case
Case --> Labyrinthe : true
Labyrinthe -> Case : setSpecial(true)
Case --> Labyrinthe
end
loop
Labyrinthe -> Case : isEmpty()
Case --> Labyrinthe : true
Labyrinthe -> Case : setPotion(true)
Case --> Labyrinthe
deactivate Case
end
Labyrinthe --> Jeu 
deactivate Labyrinthe
@enduml


Diagramme de séquence fonctionnalité 1.2


@startuml
-> Jeu : deplacement("z")
activate Jeu

Jeu -> Labyrinthe : isEmpty(x, y-1)
activate Labyrinthe
Labyrinthe -> Case : isEmpty()
activate Case
Labyrinthe <-- Case : true
deactivate Case
Labyrinthe --> Jeu : true
deactivate Labyrinthe
Jeu -> Aventurier : setY(y-1)
activate Aventurier
Aventurier --> Jeu
deactivate Aventurier
<-- Jeu
deactivate Jeu
@enduml

Diagramme de séquence fonctionnalité 2.1

@startuml
activate Jeu
loop 2
loop
create MonstreImmo
Jeu -> MonstreImmo : new MonstreImmo(x, y)
activate MonstreImmo
MonstreImmo -> Labyrinthe : isEmpty(x, y)
activate Labyrinthe
Labyrinthe -> Case : isEmpty()
activate Case
Case --> Labyrinthe : true
deactivate Case
Labyrinthe --> MonstreImmo : true
deactivate Labyrinthe
MonstreImmo -> Labyrinthe : isTaken(x, y)
activate Labyrinthe
Labyrinthe -> Case : isTaken()
activate Case
Case --> Labyrinthe : false
deactivate Case
Labyrinthe --> MonstreImmo: false
deactivate Labyrinthe
MonstreImmo -> Labyrinthe : getCase()
activate Labyrinthe
Labyrinthe -> Case : setTaken(true)
activate Case
Case --> Labyrinthe
deactivate Case
Labyrinthe --> MonstreImmo
deactivate Labyrinthe
MonstreImmo -> MonstreImmo : setNom("Mimmo")
MonstreImmo --> Jeu
deactivate MonstreImmo
end
end
deactivate Jeu
@enduml

Diagramme de séquence fonctionnalité 2.2
@startuml
-> Jeu : deplacement("z")
activate Jeu

Jeu -> Labyrinthe : isEmpty(x, y-1)
activate Labyrinthe
Labyrinthe -> Case : isEmpty()
activate Case
Labyrinthe <-- Case : true
Labyrinthe --> Jeu : true
Jeu -> Labyrinthe : isTaken(x, y-1)
Labyrinthe -> Case : isTaken()
Labyrinthe <-- Case : true
deactivate Case
Labyrinthe --> Jeu : true
deactivate Labyrinthe
Jeu -> Aventurier : setY(y-1)
activate Aventurier
Aventurier --> Jeu
deactivate Aventurier
<-- Jeu
deactivate Jeu
@enduml



Diagramme de séquence fonctionnalité Attaque

@startuml
JeuPerso -> Aventurier : attaquer(j)
activate Aventurier
Aventurier -> Labyrinthe : isTaken(x, y)
activate Labyrinthe
Labyrinthe --> Aventurier : true
deactivate Labyrinthe
Aventurier -> Aventurier : getAttaque()
Aventurier -> MonstreImmobile : getVie()
activate MonstreImmobile
MonstreImmobile --> Aventurier : vie
Aventurier -> MonstreImmobile : setVie(vie-attaque)
MonstreImmobile -> MonstreImmobile : etreEnVie
MonstreImmobile --> Aventurier 
deactivate MonstreImmobile
Aventurier --> JeuPerso
deactivate Aventurier
@enduml




Diagramme de fonctionnalité épée 

@startuml
JeuPerso -> Aventurier : deplacement("z")
activate Aventurier
Aventurier --> JeuPerso 
deactivate Aventurier
JeuPerso -> Labyrinthe : isSpecial(x, y)
activate Labyrinthe
Labyrinthe -> Case : isSpecial()
activate Case
Case --> Labyrinthe : true
deactivate Case
Labyrinthe --> JeuPerso : true
deactivate Labyrinthe
JeuPerso -> Aventurier : setEpee(true)
activate Aventurier
Aventurier --> JeuPerso
JeuPerso -> Aventurier : setAttaque(2)
Aventurier --> JeuPerso
deactivate Aventurier
@enduml



Diagramme de séquence Potion

@startuml
JeuPerso -> Aventurier : deplacement("z")
activate Aventurier
Aventurier --> JeuPerso 
deactivate Aventurier
JeuPerso -> Labyrinthe : isPotion(x, y)
activate Labyrinthe
Labyrinthe -> Case : isPotion()
activate Case
Case --> Labyrinthe : true
deactivate Case
Labyrinthe --> JeuPerso : true
deactivate Labyrinthe
JeuPerso -> Aventurier : setVie(5)
activate Aventurier
Aventurier --> JeuPerso
deactivate Aventurier
@enduml






@startuml
loop 4
DessinPerso -> Monstre : getEnvie()
activate Monstre 
Monstre --> DessinPerso : false
deactivate Monstre
end
@enduml